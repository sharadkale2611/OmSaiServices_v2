@using OmSaiModels.Worker;
@model WorkerAttendanceModel;
@{
    Layout = "_layout2";
    var worker = @ViewBag.Worker;
    var fullName = worker.FirstName + " " + worker.MiddleName + " " + worker.LastName;
}

@section css {
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBA7kFrZTCtD1NkBfx0nO6qxznbqM1cr5o&callback=initialize" type="text/javascript" async defer></script>
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" />
    <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>

}

<style>

    #map {
        height: 110px;
        width: 100%;
        border: 2px solid red;
    }

    #video, #canvas {
        border-radius: 10px;
        width: 100px;
        height: 100px;
        border-radius: 50%;
        border: 2px solid #007bff;
        box-shadow: 1px 1px 5px green;
    }

    #canvas {
        display: none;
    }

    .id-card {
        width: 300px;
        height: 500px;
        border: 2px solid #007bff;
        border-radius: 10px;
        background: #f8f9fa;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        padding: 20px;
        text-align: center;
    }

        .id-card img.profile {
            width: 100px;
            height: 200px;
            border-radius: 50%;
            border: 2px solid #007bff;
        }

        .id-card h5 {
            margin: 10px 0;
            font-weight: bold;
        }

        .id-card p {
            margin: 5px 0;
            color: #6c757d;
        }

        .id-card .barcode {
            margin-top: 20px;
        }

            .id-card .barcode img {
                width: 80%;
            }

</style>


<nav class="navbar navbar-expand-sm navbar-dark bg-danger justify-content-center align-items-center ">
    <a class="navbar-brand text-white" href="#">Om Sai Services</a>
</nav>


<div class="d-flex justify-content-center align-items-center vh-100 mt-4">
    <div class="id-card mt-4">
        <h2 class="text-center mb-4">Selfie Attendance</h2>

        <video id="video" autoplay playsinline class="border "></video>
        <canvas id="canvas" class="border"></canvas>
        <div id="map" class="mt-3"></div>

        <h5>@fullName</h5>
        <p>Worker ID: @worker.WorkmanId</p>
        <p>Department: @worker.DepartmentName</p>

        @* <hr /> *@
        <div class="text-success" id="lbl-success" style="display:none;">
            <i class="fe fe-check-circle" style="font-size:48px;"></i><br />
            <small>Attendance Completed!</small>
        </div>
        <div id="project-details">
            <p>Project: @worker.ProjectName</p>
            <p>Site: @worker.SiteName</p>
            <p id="result"></p>
        </div>
      
        <div class="barcode">
            <button id="capture" class="btn btn-primary">Capture Selfie</button>
            <button id="retake" class="btn btn-secondary shadow" style="display: none;">Retake</button>
            <button id="saveAttendance" class="btn btn-primary shadow" style="display: none;"> Submit Attendance</button>
        </div>
    </div>
</div>

<form id="attendance-form" class=" m-0 p-0" style="height:0px;">
    <input type="hidden" id="captured-image" name="SelfieImage">
    <input type="hidden" id="worker-id" name="WorkerId" placeholder="Worker ID" value="@worker.WorkerId" required><br>
    <input type="hidden" id="site-id" name="SiteId" placeholder="Site ID" value="@worker.SiteId" required><br>
    <input type="hidden" id="shift-id" name="ShiftId" placeholder="Shift ID" value="1" required><br>
    <input type="hidden" id="geo-location" name="GeoLocation" placeholder="Geo Location" required><br>
    <input type="hidden" id="txtSiteLocation" value="@worker.GpsLocation" />
</form>





@section Scripts {

    <script>

          $('#saveAttendance').click(()=>{
               $('#attendance-form').submit();
          });



        $(document).ready(function () {

            getGeoLocation();


            const video = $('#video')[0];
            const canvas = $('#canvas')[0];
            const context = canvas.getContext('2d');

             const preview = document.getElementById('preview');
             const captureButton = document.getElementById('capture');
             const capturedImageInput = document.getElementById('captured-image');

             navigator.mediaDevices.getUserMedia({ video: true })
                 .then(function (stream) {
                     video.srcObject = stream;
                 })
                 .catch(function (error) {
                     console.error("Unable to access the camera", error);
                 });


          captureButton.addEventListener('click', function () {
            const context = canvas.getContext('2d');
            canvas.width = video.videoWidth;
            canvas.height = video.videoHeight;

            context.drawImage(video, 0, 0, canvas.width, canvas.height);

            const currentDate = new Date();
            const formattedDate = currentDate.toLocaleString();

            const location = $('#geo-location').val();

            const { lat, lon } = parseCoordinates(location);

            getLocationName(lat, lon, function(locationName, lat, lon) {
                context.font = "20px Arial";
                context.fillStyle = "white";
                context.fillText(locationName, 20, canvas.height - 40);
                context.fillText(formattedDate, 20, canvas.height - 20);

                const imageData = canvas.toDataURL('image/jpeg');

                $('#canvas').show();
                $('#retake').show();
                $('#saveAttendance').show();

                $('#capture').hide();
                $('#video').hide();

                $('#selfieData').val(imageData);

                capturedImageInput.value = imageData;

                displayMap(lat, lon);
                calculateDistance();
            });
        });

        function displayMap(lat, lon) {
            var map = L.map('map').setView([lat, lon], 13);

            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
            }).addTo(map);

            L.marker([lat, lon]).addTo(map)
                .bindPopup("<b>Location:</b> " + lat.toFixed(4) + ", " + lon.toFixed(4))
                .openPopup();
        }




             $('#attendance-form').on('submit', function (e) {
                 e.preventDefault();

                const formData = new FormData();
                const blob = dataURItoBlob(capturedImageInput.value);
                formData.append('SelfieImage', blob, 'selfie.png');
                 // formData.append('SelfieImage', capturedImageInput.value);
                 formData.append('WorkerId', $('#worker-id').val());
                 formData.append('SiteId', $('#site-id').val());
                 formData.append('ShiftId', $('#shift-id').val());
                 formData.append('GeoLocation', $('#geo-location').val());

                const baseUrl = `${window.location.protocol}//${window.location.host}`;

                const apiUrl = `${baseUrl}/api/WorkerAttendance`;

                 $.ajax({
                     url: apiUrl,
                     method: 'POST',
                     headers: {
                         mask: 'rugkg',
                         hkh: 'vjgj'
                     },
                     processData: false,
                     contentType: false,
                     data: formData,
                     success: function (response) {
                         console.log(response);
                         if(response.success ==true){
                             $('#lbl-success').show();
                            $('#retake').hide();
                            $('#project-details').hide();
                            $('#saveAttendance').hide();
                         }
                         else{
                             $('#lbl-success').hide();
                            alert('Attendance Failed!');
                         }
                     },
                     error: function (xhr, status, error) {
                         console.error(error);
                         alert('An error occurred while submitting attendance.');
                     }
                 });
             });



         });

        function dataURItoBlob(dataURI) {
            const byteString = atob(dataURI.split(',')[1]);
            const mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];
            const ab = new ArrayBuffer(byteString.length);
            const ia = new Uint8Array(ab);
            for (let i = 0; i < byteString.length; i++) {
                ia[i] = byteString.charCodeAt(i);
            }
            return new Blob([ab], { type: mimeString });
        }

        $('#retake').click(function () {
                $('#canvas').hide();
                $('#video').show();
                $('#retake').hide();
                $('#saveAttendance').hide();
                $('#capture').show();
                $('#selfieData').val('');
                $('#result').html('');
            });


                function getGeoLocation() {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(
                    function (position) {
                        const latitude = position.coords.latitude;
                        const longitude = position.coords.longitude;

                        $('#geo-location').val(`${latitude}, ${longitude}`);

                        displayMap(latitude, longitude);
                    },
                    function (error) {
                        console.error("Error fetching geolocation:", error);
                        switch (error.code) {
                            case error.PERMISSION_DENIED:
                                alert("User denied the request for Geolocation.");
                                break;
                            case error.POSITION_UNAVAILABLE:
                                alert("Location information is unavailable.");
                                break;
                            case error.TIMEOUT:
                                alert("The request to get user location timed out.");
                                break;
                            default:
                                alert("An unknown error occurred.");
                                break;
                        }
                    }
                );
            } else {
                alert("Geolocation is not supported by this browser.");
            }
        }

        function displayMap(lat, lon) {
            $('#map-container').html('<div id="map" style="height: 300px;"></div>');

            var map = L.map('map').setView([lat, lon], 13);

            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
            }).addTo(map);

            L.marker([lat, lon]).addTo(map)
                .bindPopup("<b>Current Location</b><br>Lat: " + lat.toFixed(4) + "<br>Lon: " + lon.toFixed(4))
                .openPopup();
        }

        $(document).ready(function () {
            getGeoLocation();
        });



        function getDistanceInMeters(lat1, lon1, lat2, lon2) {
                    const R = 6371000; 
                    const toRadians = (degrees) => degrees * (Math.PI / 180);

                    const dLat = toRadians(lat2 - lat1);
                    const dLon = toRadians(lon2 - lon1);

                    const a =
                        Math.sin(dLat / 2) * Math.sin(dLat / 2) +
                        Math.cos(toRadians(lat1)) *
                        Math.cos(toRadians(lat2)) *
                        Math.sin(dLon / 2) * Math.sin(dLon / 2);

                    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));

                    return R * c;
                }

               function parseCoordinates(input) {
                   const [lat, lon] = input.split(',').map(coord => parseFloat(coord.trim()));
                   return { lat, lon };
               }


                function calculateDistance() {
                     const point1 = document.getElementById("geo-location").value;
                     const point2 = document.getElementById("txtSiteLocation").value;

                    const { lat: lat1, lon: lon1 } = parseCoordinates(point1);
                     const { lat: lat2, lon: lon2 } = parseCoordinates(point2);

                    const distance = getDistanceInMeters(lat1, lon1, lat2, lon2);
                     if(distance > 200){
                           let distance2 = distance - 200;
                           $("#saveAttendance").hide();
                         document.getElementById("result").innerHTML = `<span class="text-danger">You are away from Site: ${distance2.toFixed(2)} meters</span>`;
                     }else{
                            $("#saveAttendance").show();
                             document.getElementById("result").innerHTML = `<span class="text-success">Site Distance: ${distance.toFixed(2)} meters</span>`;
                     }

                }

                       function getLocationName(latitude, longitude, callback) {
                      $.ajax({
                                 url: `https://nominatim.openstreetmap.org/reverse?format=json&lat=${latitude}&lon=${longitude}&addressdetails=1`,
                                 type: 'GET',
                                 success: function (data) {
                                  const locationName = data.address.road + ", " + data.address.city + ", " + data.address.country;
                                  callback(locationName, latitude, longitude);
                              },
                error: function () {
                    console.log("Error getting location name");
                    callback("Unknown Location", latitude, longitude);
                }
            });
        }




    </script>

}